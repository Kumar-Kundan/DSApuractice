/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *temp=headA;
        int m=0,n=0;

        //Finding the size of first list
        while(temp!=nullptr){
            m++;
            temp=temp->next;
        }
        temp=headB;

        //Finding the size of second list
        while(temp!=nullptr){
            n++;
            temp=temp->next;
        }

        //Going to the m-n address of bigger list so that we can start comparing with same skip
        if(m-n>0)
            for(int i=1;i<=m-n;++i)
                headA=headA->next;
        else
            for(int i=1;i<=n-m;++i)
               headB=headB->next;
        
        //Comparing addresses
        while(headA!=headB && headA!=nullptr){
            headA=headA->next;
            headB=headB->next;
        }
        return headA;
    }
//     ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
// {
//     ListNode *p1 = headA;
//     ListNode *p2 = headB;
        
//     if (p1 == NULL || p2 == NULL) return NULL;

//     while (p1 != NULL && p2 != NULL && p1 != p2) {
//         p1 = p1->next;
//         p2 = p2->next;

//         //
//         // Any time they collide or reach end together without colliding 
//         // then return any one of the pointers.
//         //
//         if (p1 == p2) return p1;

//         //
//         // If one of them reaches the end earlier then reuse it 
//         // by moving it to the beginning of other list.
//         // Once both of them go through reassigning, 
//         // they will be equidistant from the collision point.
//         //
//         if (p1 == NULL) p1 = headB;
//         if (p2 == NULL) p2 = headA;
//     }
        
//     return p1;
// }
};

//time complexity=O(m+n)
//in worst case ,no. of comparision=2(m+n)

